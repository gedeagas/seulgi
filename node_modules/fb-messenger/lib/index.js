'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _request = require('request');

var _request2 = _interopRequireDefault(_request);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FBMessenger = function () {
  function FBMessenger(token, notificationType) {
    _classCallCheck(this, FBMessenger);

    this.token = token;
    this.notificationType = notificationType || 'REGULAR';
  }

  _createClass(FBMessenger, [{
    key: 'sendTextMessage',
    value: function sendTextMessage(id, text, notificationType, cb) {
      var messageData = {
        text: text
      };
      this.sendMessage(id, messageData, notificationType, cb);
    }
  }, {
    key: 'sendImageMessage',
    value: function sendImageMessage(id, imageURL, notificationType, cb) {
      var messageData = {
        'attachment': {
          'type': 'image',
          'payload': {
            'url': imageURL
          }
        }
      };
      this.sendMessage(id, messageData, notificationType, cb);
    }
  }, {
    key: 'sendHScrollMessage',
    value: function sendHScrollMessage(id, elements, notificationType, cb) {
      var messageData = {
        'attachment': {
          'type': 'template',
          'payload': {
            'template_type': 'generic',
            'elements': elements
          }
        }
      };
      this.sendMessage(id, messageData, notificationType, cb);
    }
  }, {
    key: 'sendButtonsMessage',
    value: function sendButtonsMessage(id, text, buttons, notificationType, cb) {
      var messageData = {
        'attachment': {
          'type': 'template',
          'payload': {
            'template_type': 'button',
            'text': text,
            'buttons': buttons
          }
        }
      };
      this.sendMessage(id, messageData, notificationType, cb);
    }
  }, {
    key: 'sendReceiptMessage',
    value: function sendReceiptMessage(id, payload, notificationType, cb) {
      payload.template_type = 'receipt';
      var messageData = {
        'attachment': {
          'type': 'template',
          'payload': payload
        }
      };
      this.sendMessage(id, messageData, notificationType, cb);
    }
  }, {
    key: 'sendQuickRepliesMessage',
    value: function sendQuickRepliesMessage(id, attachment, quickReplies, notificationType, cb) {
      var _messageData;

      var attachmentType = typeof attachment === 'string' ? 'text' : 'attachment';
      var attachmentObject = typeof attachment === 'string' ? attachment : {
        type: 'template',
        'payload': {
          'template_type': 'generic',
          'elements': attachment
        }
      };
      var messageData = (_messageData = {}, _defineProperty(_messageData, attachmentType, attachmentObject), _defineProperty(_messageData, 'quick_replies', quickReplies), _messageData);
      this.sendMessage(id, messageData, notificationType, cb);
    }
  }, {
    key: 'sendMessage',
    value: function sendMessage(id, data) {
      var notificationType = arguments.length <= 2 || arguments[2] === undefined ? this.notificationType : arguments[2];
      var cb = arguments[3];

      if (typeof notificationType === 'function') {
        cb = notificationType;
        notificationType = this.notificationType;
      }
      var req = {
        url: 'https://graph.facebook.com/v2.6/me/messages',
        qs: { access_token: this.token },
        method: 'POST',
        json: {
          recipient: {
            id: id
          },
          message: data,
          notification_type: notificationType
        }
      };
      sendRequest(req, cb);
    }
  }, {
    key: 'getProfile',
    value: function getProfile(id, cb) {
      var req = {
        method: 'GET',
        uri: 'https://graph.facebook.com/v2.6/' + id,
        qs: {
          fields: 'first_name,last_name,profile_pic,locale,timezone,gender',
          access_token: this.token
        },
        json: true
      };
      sendRequest(req, cb);
    }
  }, {
    key: 'setWelcomeMessage',
    value: function setWelcomeMessage(pageId, message, cb) {
      if (typeof message === 'string') {
        message = {
          text: message
        };
      } else {
        message = {
          attachment: {
            type: 'template',
            payload: message
          }
        };
      }
      var jsonObject = {
        setting_type: 'call_to_actions',
        thread_state: 'new_thread',
        call_to_actions: [{
          message: message
        }]
      };
      this.sendThreadSettingsMessage(pageId, jsonObject, cb);
    }
  }, {
    key: 'setGreetingText',
    value: function setGreetingText(pageId, message, cb) {
      var jsonObject = {
        setting_type: 'greeting',
        greeting: {
          text: message
        }
      };
      this.sendThreadSettingsMessage(pageId, jsonObject, cb);
    }
  }, {
    key: 'setPersistentMenu',
    value: function setPersistentMenu(pageId, menuItems, cb) {
      var jsonObject = {
        setting_type: 'call_to_actions',
        thread_state: 'existing_thread',
        call_to_actions: menuItems
      };
      this.sendThreadSettingsMessage(pageId, jsonObject, cb);
    }
  }, {
    key: 'sendThreadSettingsMessage',
    value: function sendThreadSettingsMessage(pageId, jsonObject, cb) {
      var req = {
        method: 'POST',
        uri: 'https://graph.facebook.com/v2.6/' + pageId + '/thread_settings',
        qs: {
          access_token: this.token
        },
        json: jsonObject
      };
      sendRequest(req, cb);
    }
  }]);

  return FBMessenger;
}();

var sendRequest = function sendRequest(req, cb) {
  (0, _request2.default)(req, function (err, res, body) {
    if (!cb) return;
    if (err) return cb(err);
    if (body.error) return cb(body.error);
    cb(null, body);
  });
};

exports.default = FBMessenger;
module.exports = exports['default'];